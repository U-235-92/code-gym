package aq.gym.contests.dynamic;

public class MinCostClimbingStairs {

//	https://leetcode.com/problems/min-cost-climbing-stairs
	public static void main(String[] args) {
//		int[] cost = {10,15,20};
//		int[] cost = {1,100,1,1,1,100,1,1,100,1};
//		int[] cost = {841,462,566,398,243,248,238,650,989,576,361,126,334,729,446,897,953,38,195,679,65,707,196,705,569,275,259,872,630,965,978,109,56,523,851,887,91,544,598,963,305,481,959,560,454,883,50,216,732,572,511,156,177,831,122,667,548,978,771,880,922,777,990,498,525,317,469,151,874,202,519,139,670,341,514,469,858,913,94,849,839,813,664,163,3,802,21,634,944,901,446,186,843,742,330,610,932,614,625,169,833,4,81,55,124,294,71,24,929,534,621,543,417,534,427,327,179,90,341,949,368,692,646,290,488,145,273,617,596,82,538,751,80,616,763,826,932,184,630,478,163,925,259,237,839,602,60,786,603,413,816,278,4,35,243,64,631,405,23,638,618,829,481,877,756,482,999,973,718,157,262,752,931,882,741,40,77,535,542,879,607,879,321,46,210,116,244,830,591,285,382,925,48,497,913,203,239,696,162,623,291,525,950,27,546,293,108,577,672,354,256,3,671,998,22,989,557,424,251,923,542,243,46,488,80,374,372,334,190,817,150,742,362,196,75,193,162,645,859,758,433,903,199,289,175,303,475,818,213,576,181,668,243,297,572,549,840,161,292,719,226,338,981,345,203,655,210,65,111,746,76,935,406,646,976,567,32,726,638,674,727,861,426,297,349,464,973,341,452,826,223,805,940,458,468,967,107,345,987,553,407,916,103,324,367,864,74,946,712,596,105,194,79,634,855,703,70,170,543,208,739,632,663,880,857,824,258,743,488,659,647,470,958,492,211,927,356,488,744,570,143,674,502,589,270,80,6,463,506,556,495,713,407,229,689,280,162,454,757,565,267,575,417,948,607,269,852,938,560,24,222,580,604,800,628,487,485,615,796,384,555,226,412,445,503,810,949,966,28,768,83,213,883,963,831,390,951,378,497,440,780,209,734,290,96,398,146,56,445,880,910,858,671,164,552,686,748,738,837,556,710,787,343,137,298,685,909,828,499,816,538,604,652,7,272,729,529,343,443,593,992,434,588,936,261,873,64,177,827,172,712,628,609,328,672,376,628,441,9,92,525,222,654,699,134,506,934,178,270,770,994,158,653,199,833,802,553,399,366,818,523,447,420,957,669,267,118,535,971,180,469,768,184,321,712,167,867,12,660,283,813,498,192,740,696,421,504,795,894,724,562,234,110,88,100,408,104,864,473,59,474,922,759,720,69,490,540,962,461,324,453,91,173,870,470,292,394,771,161,777,287,560,532,339,301,90,411,387,59,67,828,775,882,677,9,393,128,910,630,396,77,321,642,568,817,222,902,680,596,359,639,189,436,648,825,46,699,967,202,954,680,251,455,420,599,20,894,224,47,266,644,943,808,653,563,351,709,116,849,38,870,852,333,829,306,881,203,660,266,540,510,748,840,821,199,250,253,279,672,472,707,921,582,713,900,137,70,912,51,250,188,967,14,608,30,541,424,813,343,297,346,27,774,549,931,141,81,120,342,288,332,967,768,178,230,378,800,408,272,596,560,942,612,910,743,461,425,878,254,929,780,641,657,279,160,184,585,651,204,353,454,536,185,550,428,125,889,436,906,99,942,355,666,746,964,936,661,515,978,492,836,468,867,422,879,92,438,802,276,805,832,649,572,638,43,971,974,804,66,100,792,878,469,585,254,630,309,172,361,906,628,219,534,617,95,190,541,93,477,933,328,984,117,678,746,296,232,240,532,643,901,982,342,918,884,62,68,835,173,493,252,382,862,672,803,803,873,24,431,580,257,457,519,388,218,970,691,287,486,274,942,184,817,405,575,369,591,713,158,264,826,870,561,450,419,606,925,710,758,151,533,405,946,285,86,346,685,153,834,625,745,925,281,805,99,891,122,102,874,491,64,277,277,840,657,443,492,880,925,65,880,393,504,736,340,64,330,318,703,949,950,887,956,39,595,764,176,371,215,601,435,249,86,761,793,201,54,189,451,179,849,760,689,539,453,450,404,852,709,313,529,666,545,399,808,290,848,129,352,846,2,266,777,286,22,898,81,299,786,949,435,434,695,298,402,532,177,399,458,528,672,882,90,547,690,935,424,516,390,346,702,781,644,794,420,116,24,919,467,543,58,938,217,502,169,457,723,122,158,188,109,868,311,708,8,893,853,376,359,223,654,895,877,709,940,195,323,64,51,807,510,170,508,155,724,784,603,67,316,217,148,972,19,658,5,762,618,744,534,956,703,434,302,541,997,214,429,961,648,774,244,684,218,49,729,990,521,948,317,847,76,566,415,874,399,613,816,613,467,191};
//		int[] cost = {55,372};
//		int[] cost = {3,7,5};
		int[] cost = {926,212,377,109,95,146,307,528,898,689,866,186,393,359,306,777,513,294,269,849,473,457,764,493,331,424,892,450,806,663,361,884,63,274,579,321,704,649,259,544,515,58,978,140,211,780,652,767,772,147,402,849,284,721,698,883,360,994,194,727,886,775,428,608,640,280,197,129,489,896,474,4,275,800,338,135,180,341,25,692,110,279,825,861,544,46,494,487,338,815,365,804,166,502,995,946,551,553,443,802,301,260,229,223,23,354,241,938,584,74,685,120,153,764,999,979,635,733,971,594,419,290,705,709,583,155,969,267,668,212,705,638,785,688,34,38,274,696,102,881,728,69,61,427,98,869,637,104,784,806,928,788,297,361,24,248,695,344,220,874,193,240,31,961,247,350,59,408,408,9,818,740,959,22,642,212,962,831,805,623,33,351,950,469,570,981,591,234,106,45,52,830,10,954,921,807,219,671,480,944,457,14,309,496,161,494,704,606,454,528,681,101,690,463,974,662,66,173,246,320,953,281,952,205,152,557,957,690,806,622,343,360,428,760,283,278,688,993,236,270,17,778,140,123,353,103,690,576,575,16,864,15,522,2,534,769,547,801,500,464,376,979,299,641,378,715,278,148,534,120,81,759,740,660,834,369,654,611,842,889,391,322,408,801,515,50,733,960,255,233,679,148,262,690,625,551,109,290,622,699,359,265,15,666,810,300,686,794,897,630,268,44,420,294,796,812,137,639,591,246,468,992,909,662,524,391,799,625,364,890,693,960,926,307,712,466,387,858,382,421,489,243,376,145,445,264,597,665,488,148,591,361,569,786,305,177,622,861,709,331,348,486,535,842,755,888,29,874,631,199,796,369,643,84,622,407,320,720,406,657,247,300,349,436,566,563,880,225,349,608,105,427,274,310,48,698,527,221,12,895,745,89,403,795,658,706,551,24,220,557,587,681,261,305,676,480,251,296,489,137,88,238,283,987,858,376,255,177,31,948,566,240,43,911,26,572,58,879,716,107,615,324,847,541,888,813,813,453,671,862,75,838,475,947,218,563,914,573,192,551,206,289,775,277,237,598,622,994,119,667,855,724,979,39,480,82,537,802,294,303,486,93,811,539,187,314,856,373,373,431,556,834,73,241,949,688,323,658,686,589,802,24,505,474,332,680,391,866,521,453,533,303,813,44,124,586,695,596,602,541,682,326,424,330,915,46,783,45,528,738,357,877,235,105,589,79,208,391,993,873,211,13,328,357,238,239,790,537,4,185,576,662,24,439,852,773,798,567,49,778,88,490,13,221,199,774,108,487,981,116,438,949,757,6,998,308,474,176,705,166,451,157,57,430,208,684,814,945,432,791,834,184,601,322,510,110,774,503,605,451,210,696,32,331,860,36,956,678,371,638,237,447,474,383,162,221,445,301,492,161,83,869,848,938,804,473,957,592,514,526,617,958,171,288,537,424,941,506,59,970,109,23,73,728,596,209,433,168,725,468,432,23,327,675,69,482,982,525,757,683,862,90,472,392,334,316,540,936,364,57,586,512,450,527,489,580,947,220,610,872,978,491,799,543,814,790,758,434,855,292,737,785,960,242,236,898,997,747,209,673,299,411,964,106,412,535,974,243,354,226,149,370,440,79,607,800,932,535,335,228,485,893,635,459,341,195,525,960,436,100,215,915,627,876,211,536,372,616,353,437,872,856,712,327,514,377,133,762,601,197,837,373,370,546,768,329,973,311,604,11,712,385,773,318,289,136,994,347,41,369,241,965,860,363,594,321,446,642,203,593,675,668,305,883,264,675,26,559,398,776,197,68,156,190,400,120,469,544,863,12,285,939,275,109,734,870,814,219,662,507,968,56,364,173,671,606,541,542,707,895,494,630,224,757,212,757,619,914,857,281,948,218,2,590,354,259,19,856,498,781,611,813,60,310,792,240,749,954,652,797,799,545,388,764,181,612,222,463,889,18,483,942,381,134,994,529,457,214,920,873,482,370,258,528,892,855,836,475,674,913,782,716,114,596,724,264,552,699,862,758,971,863,361,924,654,430,523,252,261,215,785,56,120,438,967,866,217,336,868,343,700,921,600,371,271,764,478,746,159,444,953,633,457,731,606,992,559,817,729,33,711,842,442,903,611,841,626,389,838,778,396,52,514,415,717,983,142,725,114,43,946,791,449,617,191,12,820,995,937,306,427,817,45,638,869,349,819,556,548,657,370,586,372,535,582,28,365,301,253,635,968,442,83,765,45,983,571,262,677,594,852,932,962,969,22,962,690,197,376};
		System.out.println(new MinCostClimbingStairs().minCostClimbingStairs(cost));
	}
	
    public int minCostClimbingStairs(int[] cost) {
    	if(cost.length == 1) {
			return cost[0];
		}
		if(cost.length == 2) {
			return Math.min(cost[0], cost[1]);
		}
		int oneStep = cost[0];
		int twoStep = cost[1];
		for(int i = 2; i < cost.length; i++) {
			int curStep = cost[i];
			int minStep = curStep + Math.min(oneStep, twoStep);
			oneStep = twoStep;
			twoStep = minStep;
		}
		return Math.min(oneStep, twoStep);
    }
}
